import numpy as np
import sys
from cantrips import readInDataFromFitsFile
from cantrips import saveDataToFitsFile
from astropy.io import fits
from astropy import wcs

if __name__ == "__main__":
    args = sys.argv[1:]
    print ('args = ' + str(args))
    target_dir, target_positions_file, target_wcs_fits_file, target_wcs_txt_file, target_image_file = sys.argv[1:]
    #print ('target_positions_file = ' + str(target_positions_file)) 

    wcs_data, wcs_header = readInDataFromFitsFile(target_wcs_fits_file, target_dir)
    image_data, image_header = readInDataFromFitsFile(target_image_file, target_dir)

    wcs_prefix = 'wcs_'
    

    with open(target_dir + target_positions_file, 'r') as f:
        lines = [ [float(pos) for pos in line.rstrip('\n').split(' ')] for line in f]
        #print ('lines[0] = ' + str(lines[0])) 
        obj_nums = [line[0] for line in lines]
        x_y_positions = np.array([[line[1], line[2]] for line in lines], np.float_) 

    keywords_to_copy = ['WCSAXES', 'CTYPE1','CTYPE2','EQUINOX','LONPOLE','LATPOLE','CRVAL1',
                        'CRVAL2','CRPIX1','CRPIX2','CUNIT1','CUNIT2','CD1_1','CD1_2','CD2_1','CD2_2',
                        'IMAGEW','IMAGEH',
                        'A_ORDER','A_0_0','A_0_1','A_0_2','A_1_0','A_1_1','A_2_0',
                        'B_ORDER','B_0_0','B_0_1','B_0_2','B_1_0','B_1_1','B_2_0',
                        'AP_ORDER','AP_0_0','AP_0_1','AP_0_2','AP_1_0','AP_1_1','AP_2_0',
                        'BP_ORDER','BP_0_0','BP_0_1','BP_0_2','BP_1_0','BP_1_1','BP_2_0']
    #wcs_units_key_strs = ['CUNIT1', 'CUNIT2']
    #center_pixel_key_strs = ['CRPIX1', 'CRPIX2']
    #center_wcs_key_strs = ['CRVAL1', 'CRVAL2']
    #conv_matrix_key_strs = [['CD1_1', 'CD1_2'],['CD2_1','CD2_2']]
    #distortion_key_strs = [['A_ORDER', 'A'], ['B_ORDER', 'B']]
    #distortion_coefs = [[[float(wcs_header[distortions[1] + '_' + str(i) + '_' + str(j)])
    #                      for j in range(wcs_header[distortions[0]] +1 - i)]
    #                     for i in range(wcs_header[distortions[0]] + 1) ]
    #                    for distortions in distortion_key_strs]
    #distortion_functs = [lambda x, y: sum([sum([distortion_coefs[0][i][j] * y ** j
    #                                            for j in range(len(distortion_coefs[0][i]) )]) * x ** i
    #                                       for i in range(len(distortion_coefs[0]) )]),
    #                     lambda x, y: sum([sum([distortion_coefs[1][i][j] * x ** j
    #                                            for j in range(len(distortion_coefs[1][i]) )]) * y ** i
    #                                       for i in range(len(distortion_coefs[1]) )])
    #                     ]
    ##distortion_functs = [lambda x, y: 0.0, lambda x, y: 0.0]
    #cr_pix = [wcs_header[center_pixel_key_strs[0]], wcs_header[center_pixel_key_strs[1]]]
    ##print ('cr_pix = ' + str(cr_pix))
    #cr_val = [wcs_header[center_wcs_key_strs[0]], wcs_header[center_wcs_key_strs[1]]]
    ##print ('cr_val = ' + str(cr_val))
    #cd_matrix = [[wcs_header[conv_matrix_key_strs[0][0]], wcs_header[conv_matrix_key_strs[0][1]]], [wcs_header[conv_matrix_key_strs[1][0]], wcs_header[conv_matrix_key_strs[1][1]]]]
    #print ('cd_matrix = ' + str(cd_matrix))

    image_header['COMMENT'] = 'WCS information generated by nova.astronometry.net'
    image_header['COMMENT'] = 'See file ' + target_wcs_fits_file + ' for details.'
    for key in keywords_to_copy:
        image_header[key] = wcs_header[key] 
    #for i in range(2):
    #    image_header[wcs_units_key_strs[i]] = wcs_header[wcs_units_key_strs[i]]
    #    image_header[center_pixel_key_strs[i]] = cr_pix[i]
    #    image_header[center_wcs_key_strs[i]] = cr_val[i]
    #    for j in range(2): 
    #        image_header[conv_matrix_key_strs[i][j]] = cd_matrix[i][j]

    

    saveDataToFitsFile(image_data.transpose(), wcs_prefix + target_image_file, target_dir, header = image_header)

    hdulist = fits.open(target_dir + wcs_prefix + target_image_file)
    wcs_object = wcs.WCS(hdulist[0].header)
    RA_Dec_positions = wcs_object.wcs_pix2world(x_y_positions, 1)
    
    #objs_at_origin = [[x_y_pos[0] - cr_pix[0], x_y_pos[1] - cr_pix[1]] for x_y_pos in x_y_positions]
    
    #warped_objs = [[obj_at_origin[i] + distortion_functs[i](*obj_at_origin)
    #                for i in range(len(obj_at_origin))]
    #               for obj_at_origin in objs_at_origin]
    
    #RA_Dec_at_origin = [[sum([cd_matrix[i][j] * warped_obj[j]
    #                          for j in range(len(warped_obj))])
    #                     for i in range(len(cd_matrix))]
    #                    for warped_obj in warped_objs]
    
    #RA_Dec_positions = [[RA_Dec[i] + cr_val[i] for i in range(len(RA_Dec))] for RA_Dec in RA_Dec_at_origin]
     

    
    with open(target_dir + target_wcs_txt_file, 'w') as f:
        for i in range(len(RA_Dec_positions)):
            ra_dec = RA_Dec_positions[i]
            obj_num = obj_nums[i] 
            f.write(' '.join([str(int(obj_num))] + [str(elem) for elem in ra_dec]) + '\n')
        
        

    #Do the analysis
